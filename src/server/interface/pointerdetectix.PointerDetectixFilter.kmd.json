{
  "remoteClasses": [
    {
      "name": "PointerDetectixFilter",
      "extends": "Filter",
      "doc": "This type of :rom:cls:`Filter` detects UI pointers in a video feed.",
      "constructor":
        {
          "doc": "Builder for the :rom:cls:`PointerDetectix`.",
          "params": [
            {
              "name": "mediaPipeline",
              "doc": "the :rom:cls:`MediaPipeline` to which the filter belongs",
              "type": "MediaPipeline"
            },
            {
              "name": "calibrationRegion",
              "doc": "region to calibrate the filter",
              "type": "WindowParam"
            },
            {
              "name": "windows",
              "doc": "list of detection windows for the filter.",
              "type": "PointerDetectixWindowMediaParam[]",
              "optional": true,
              "defaultValue": []
            }
          ]
        },
      "methods": 
      [
                {
                    "name": "startPipelinePlaying",
                    "doc":  "changes pipeline state to PLAYING",
                    "params": [ ],
                    "return": 
                    {
                        "doc": "FALSE when Failed.",
                        "type": "boolean"
                    }
                },
                {
                    "name": "stopPipelinePlaying",
                    "doc":  "changes pipeline state from PLAYING to READY",
                    "params": [ ],
                    "return": 
                    {
                        "doc": "FALSE when Failed.",
                        "type": "boolean"
                    }
                },
                {
                    "name": "getElementsNamesList",
                    "doc": "gets a string of names of all elements separated by tabs.",
                    "params": [ ],
                    "return": 
                    {
                        "doc": "names of all elements separated by tabs --- pipeline name is the first element",
                        "type": "String"
                    }
                },
                {
                    "name": "getLastError",
                    "doc": "gets string of last error --- empty string when no error",
                    "params": [ ],
                    "return": 
                    {
                        "doc": "string of last error --- empty string when no error",
                        "type": "String"
                    }
                },
                {
                    "name": "getParamsList",
                    "doc": "gets a string of all parameters separated by tabs.",
                    "params": [ ],
                    "return": 
                    {
                        "doc": "all parameters separated by tabs --- each one is: name=value",
                        "type": "String"
                    }
                },
                {
                    "name": "getParam",
                    "doc": "gets the current string value of one parameter.",
                    "params": 
                    [
                        {
                            "name": "aParamName",
                            "doc":  "string with name of parameter.",
                            "type": "String"
                        }
                    ],
                    "return": 
                    {
                        "doc": "current value of named parameter --- empty if invalid name",
                        "type": "String"
                    }
                },
                {
                    "name": "setParam",
                    "doc": "sets the current string value of one parameter.",
                    "params": 
                    [
                        {
                            "name": "aParamName",
                            "doc":  "string with name of parameter.",
                            "type": "String"
                        },
                        {
                            "name": "aNewParamValue",
                            "doc":  "string has the desired value of the parameter.",
                            "type": "String"
                        }
                    ],
                    "return": 
                    {
                        "doc": "FALSE when Failed.",
                        "type": "boolean"
                    }
                },

                {
                  "name": "addWindow",
                  "doc": " Adds a new detection window for the filter to detect pointers entering or exiting the window",
                  "params": [
                    {
                      "name": "window",
                      "doc": "The window to be added",
                      "type": "PointerDetectixWindowMediaParam"
                    }
                  ]
                },
                {
                  "name": "clearWindows",
                  "doc": "Removes all pointer detectix windows",
                  "params": []
                },
                {
                  "name": "trackColorFromCalibrationRegion",
                  "doc": "This method allows to calibrate the tracking color.\n\nThe new tracking color will be the color of the object in the colorCalibrationRegion.",
                  "params": []
                },
                {
                  "name": "removeWindow",
                  "doc": "Removes a window from the list to be monitored",
                  "params": [
                    {
                      "name": "windowId",
                      "doc": "the id of the window to be removed",
                      "type": "String"
                    }
                  ]
                }
              ],
              "events": [
                "WindowIn",
                "WindowOut"
              ]
          }
      ],

  "complexTypes": [
    {
      "typeFormat": "REGISTER",
      "properties": [
        {
          "name": "topRightCornerX",
          "doc": "X coordinate of the left upper point of the window",
          "type": "int"
        },
        {
          "name": "topRightCornerY",
          "doc": "Y coordinate of the left upper point of the window",
          "type": "int"
        },
        {
          "name": "width",
          "doc": "width in pixels of the window",
          "type": "int"
        },
        {
          "name": "height",
          "doc": "height in pixels of the window",
          "type": "int"
        }
      ],
      "name": "WindowParam",
      "doc": "Parameter representing a window in a video stream.\nIt is used in command and constructor for media elements.\n\nAll units are in pixels, X runs from left to right, Y from top to bottom."
    },
    {
      "typeFormat": "REGISTER",
      "properties": [
        {
          "name": "id",
          "doc": "id of the window for pointer detection",
          "type": "String"
        },
        {
          "name": "height",
          "doc": "height in pixels",
          "type": "int"
        },
        {
          "name": "width",
          "doc": "width in pixels",
          "type": "int"
        },
        {
          "name": "upperRightX",
          "doc": "X coordinate in pixels of the upper left corner",
          "type": "int"
        },
        {
          "name": "upperRightY",
          "doc": "Y coordinate in pixels of the upper left corner",
          "type": "int"
        },
        {
          "name": "activeImage",
          "doc": "uri of the image to be used when the pointer is inside the window",
          "type": "String",
          "optional": true
        },
        {
          "name": "imageTransparency",
          "doc": "transparency ratio of the image",
          "type": "float",
          "optional": true
        },
        {
          "name": "image",
          "doc": "uri of the image to be used for the window.\n\nIf :rom:attr:`activeImage` has been set, it will only be shown when the pointer is outside of the window.",
          "type": "String",
          "optional": true
        }
      ],
      "name": "PointerDetectixWindowMediaParam",
      "doc": "Data structure for UI Pointer detection in video streams.\n\nAll the coordinates are in pixels. X is horizontal, Y is vertical, running from the top of the window. Thus, 0,0 corresponds to the topleft corner."
    }
  ],
  "events": [
    {
      "properties": [
        {
          "name": "windowId",
          "doc": "Opaque String indicating the id of the window entered",
          "type": "String"
        }
      ],
      "extends": "Media",
      "name": "WindowOut",
      "doc": "Event generated when an object exits a window."

    },
    {
      "properties": [
        {
          "name": "windowId",
          "doc": "Opaque String indicating the id of the window entered",
          "type": "String"
        }
      ],
      "extends": "Media",
      "name": "WindowIn",
      "doc": "Event generated when an object enters a window."
    }
  ]
}
